#include <TicosBattery.h>
#include <Log.h>

#define BAT_TABLE_LEN       101 //电池电量
const static uint16_t s_charging_table[BAT_TABLE_LEN]=
{
    1073,1116,1136,1154,1166,1171,1174,1176,1178,1181,// 0- 9
    1185,1188,1191,1193,1196,1199,1201,1203,1206,1208,//10-19
    1210,1212,1214,1215,1216,1218,1219,1220,1221,1223,//20-29
    1224,1226,1227,1228,1230,1231,1233,1235,1237,1239,//30-39
    1240,1243,1245,1247,1250,1252,1255,1258,1260,1263,//40-49
    1266,1270,1272,1276,1279,1282,1285,1288,1291,1293,//50-59
    1296,1298,1301,1303,1305,1307,1310,1312,1314,1316,//60-69
    1318,1320,1322,1324,1326,1328,1331,1334,1336,1339,//70-79
    1342,1346,1349,1351,1354,1357,1359,1361,1363,1365,//80-89
    1366,1368,1370,1372,1375,1377,1380,1383,1386,1390,//90-99
    1395                                              //100
};

const static uint16_t s_nocharge_table[BAT_TABLE_LEN]=
{
    1133,1136,1139,1142,1145,1148,1151,1154,1157,1160,// 0- 9
    1162,1165,1167,1169,1171,1173,1175,1177,1179,1181,//10-19
    1182,1184,1186,1187,1189,1190,1192,1193,1195,1196,//20-29
    1198,1200,1201,1203,1205,1207,1209,1211,1213,1216,//30-39
    1218,1221,1224,1226,1229,1232,1235,1238,1241,1245,//40-49
    1247,1250,1253,1256,1259,1261,1264,1266,1269,1271,//50-59
    1273,1275,1278,1280,1282,1284,1286,1288,1290,1292,//60-69
    1294,1297,1299,1302,1305,1307,1310,1312,1315,1317,//70-79
    1319,1321,1323,1325,1326,1328,1329,1331,1332,1334,//80-89
    1337,1340,1343,1347,1351,1355,1360,1365,1372,1378,//90-99
    1391
};

bool TicosBattery::open(void) {
    if (!m_inited) {
        gpio_pad_select_gpio(m_det); // set det charger io
        gpio_set_direction(m_det, GPIO_MODE_INPUT); // 设置GPIO为输入
        m_inited = m_adc.open();
    }
    return true;
}

bool TicosBattery::close(void) {
    bool res = true;
    if (m_inited) {
        gpio_reset_pin(m_det);
        if ((res = m_adc.close())) {
            m_inited = false;
        }
    }
    return res;
}

/*****************************************************************************
*函数名   : charging
*函数功能 : 获取充电状态
*输入参数 : 无
*输出参数 : 无
*返回值   : true ：充电，
*         : false：放电
*****************************************************************************/
bool TicosBattery::charging(void) {
    if (m_inited) {
        return gpio_get_level(m_det) == 0;
    }
    return false;
}

/*****************************************************************************
*函数名   : capacity
*函数功能 : 获取电池容量
*输入参数 : nex - 信号采集次数（不填写或填'0'将输入默认次数）
*输出参数 : 无
*返回值   : 当前电量
*****************************************************************************/
uint8_t TicosBattery::capacity(uint8_t nex) {
    uint32_t volt = voltage(nex);
    const uint16_t* table = charging() ? s_charging_table : s_nocharge_table;
    for (uint8_t i = 0; i < BAT_TABLE_LEN; i++) {
        if (volt >= table[i]) {
            return 100 - i;
        }
    }
    return 0;
}